/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package figura;

import EN.BestMovement;
import EN.Order;
import EN.Zona;
import LN.JPanelImagenGiratoria;
import LN.aestrella;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ecubero
 */
public class Puzzle extends javax.swing.JFrame {
    private JPanelImagenGiratoria ig;
    /**
     * Creates new form Puzzle
     */
    public Puzzle() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnDerecha = new javax.swing.JButton();
        btnIzquierda = new javax.swing.JButton();
        cbZone = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Puzzle Assassin's Creed 2 Glyph 20");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnDerecha.setText("Derecha");
        btnDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerechaActionPerformed(evt);
            }
        });

        btnIzquierda.setText("Izquierda");
        btnIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzquierdaActionPerformed(evt);
            }
        });

        cbZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));

        jLabel1.setText("Zona:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(jLabel1)
                .addContainerGap(264, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(194, 194, 194))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnIzquierda)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDerecha)))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(cbZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDerecha)
                        .addComponent(btnIzquierda))
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(469, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        ig = new JPanelImagenGiratoria();
        
        ig.setPath("images/Glyph_20-Anillo6.png");
        ig.setPath2("images/Glyph_20-Anillo5.png");
        ig.setPath3("images/Glyph_20-Anillo4.png");
        ig.setPath4("images/Glyph_20-Anillo3.png");
        ig.setPath5("images/Glyph_20-Anillo2.png");
        ig.setPath6("images/Glyph_20-Anillo1.png");
        ig.setX(0);
        ig.setY(0);
        
        this.setLayout(new BorderLayout());
        this.add(ig, BorderLayout.CENTER);
        
        aestrella ae = new aestrella();
        Zona z0 = new Zona();
        Zona z1 = new Zona();
        Zona z2 = new Zona();
        Zona z3 = new Zona();
        Zona z4 = new Zona();
        Zona z5 = new Zona();
        for(int o = 0; o < 15; o++ ){
            Random randZona = new Random(); 
            int zona = randZona.nextInt(5) + 1; 
            
            Random randMovimiento = new Random();
            int Low = -1;
            int High = 1;
            int movimiento = randMovimiento.nextInt(High-Low) + Low;
            switch(zona){
                case 1:
                    if(z1.getPosition() == 0 || movimiento <0){
                        z1.setPosition(z1.getPosition() + 1);
                        z5.setPosition(z5.getPosition() + 1);
                    }
                    else if(z1.getPosition() == 11 || movimiento > 0){
                         z1.setPosition(z1.getPosition() -1);
                         z5.setPosition(z5.getPosition() - 1);
                    }
                    else{
                        z1.setPosition(z1.getPosition() + movimiento);
                        z5.setPosition(z5.getPosition() + movimiento);
                    }      
                    Thread t6 = new Thread(new Runnable() {
                        public void run() {
                            ig.moveZone(zona, z1.getPosition());
                        }
                    });  
                    t6.start();
                    break;
                case 2:
                    if(z2.getPosition() == 0 || movimiento <0){
                        z2.setPosition(z2.getPosition() + 1);
                    }
                    else if(z2.getPosition() == 11 || movimiento > 0){
                         z2.setPosition(z2.getPosition() -1);
                    }
                    else{
                        z2.setPosition(z2.getPosition() + movimiento);
                    } 
                    
                     Thread t2 = new Thread(new Runnable() {
                        public void run() {
                            ig.moveZone(zona, z2.getPosition());
                        }
                    });  
                    t2.start();                   
                    break;
                case 3:
                    if(z3.getPosition() == 0 || movimiento <0){
                        z3.setPosition(z3.getPosition() + 1);
                        z1.setPosition(z1.getPosition() + 1);
                    }
                    else if(z3.getPosition() == 11 || movimiento > 0){
                         z3.setPosition(z3.getPosition() -1);
                         z1.setPosition(z1.getPosition() -1);
                    }
                    else{
                        z3.setPosition(z3.getPosition() + movimiento);
                        z1.setPosition(z1.getPosition() + movimiento);
                    }     
                     Thread t3 = new Thread(new Runnable() {
                        public void run() {
                            ig.moveZone(zona, z3.getPosition());
                        }
                    });  
                    t3.start();   
                    break;
                case 4:
                    if(z4.getPosition() == 0 || movimiento <0){
                        z4.setPosition(z4.getPosition() + 1);
                    }
                    else if(z4.getPosition() == 11 || movimiento > 0){
                         z4.setPosition(z4.getPosition() -1);
                    }
                    else{
                        z4.setPosition(z4.getPosition() + movimiento);
                    }       
                     Thread t4 = new Thread(new Runnable() {
                        public void run() {
                            ig.moveZone(zona, z4.getPosition());
                        }
                    });  
                    t4.start(); 
                    break;
                case 5:
                    if(z5.getPosition() == 0 || movimiento <0){
                        z5.setPosition(z5.getPosition() + 1);
                        z1.setPosition(z1.getPosition() + 1);
                    }
                    else if(z5.getPosition() == 11 || movimiento > 0){
                         z5.setPosition(z5.getPosition() -1);
                         z1.setPosition(z1.getPosition() -1);
                    }
                    else{
                        z5.setPosition(z5.getPosition() + movimiento);
                        z1.setPosition(z1.getPosition() + movimiento);
                    }    
                     Thread t5 = new Thread(new Runnable() {
                        public void run() {
                            ig.moveZone(zona, z5.getPosition());
                        }
                    });  
                    t5.start(); 
                    break;
            }
            
            
        }
        /*z1.setPosition(5);
        z2.setPosition(0);
        z3.setPosition(3);
        z4.setPosition(0);
        z5.setPosition(2);*/
        Zona z0temp = new Zona();
        Zona z1temp = new Zona();
        Zona z2temp = new Zona();
        Zona z3temp = new Zona();
        Zona z4temp = new Zona();
        Zona z5temp = new Zona();
        z1temp.setPosition(z1.getPosition());
        z2temp.setPosition(z2.getPosition());
        z3temp.setPosition(z3.getPosition());
        z4temp.setPosition(z4.getPosition());
        z5temp.setPosition(z5.getPosition());
        ArrayList<Zona> listZona = new ArrayList<>();
        listZona.add(z0);
        listZona.add(z1);
        listZona.add(z2);
        listZona.add(z3);
        listZona.add(z4);
        listZona.add(z5);
        ArrayList<Zona> listZonaTemp = new ArrayList<>();
        listZonaTemp.add(z0temp);
        listZonaTemp.add(z1temp);
        listZonaTemp.add(z2temp);
        listZonaTemp.add(z3temp);
        listZonaTemp.add(z4temp);
        listZonaTemp.add(z5temp);
        
        Order or = ae.calculateOrder(listZona);
        
        
        //Prueba de calculateOrder()
        System.out.println("Minor: " + or.getMinor());
        System.out.println("Medium: " + or.getMedium());
        System.out.println("Higher: " + or.getHigher());
        
        /*Prueba del heuristico
        System.out.println("Heuristic: " + ae.heuristic(or));*/
        
        ArrayList<BestMovement> listMovement = new ArrayList<>();
        int pasos = ae.heuristic(or, listZona);
        System.out.println("PASOS NECESARIOS: " + pasos);
        
        if(((listZona.get(1).getPosition() + listZona.get(3).getPosition() + listZona.get(5).getPosition()) % 2) == 0){
            for(int i=0; i < pasos; i++){
            listMovement = ae.bestMovement(or, listZona, listZonaTemp, listMovement).getListBestMovement();
            }
        }
        else{
            System.out.println("POSICION INICIAL INVALIDA!");
        }
        
        
        ae.printMovementList(listMovement);
        System.out.println("Y aqui empezo a acomodar la bara");
        
        final ArrayList<BestMovement> listMovementF = listMovement;
        
        Thread t0 = new Thread(new Runnable() {
            
            public void run() {
                try {
                    // code goes here.
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Puzzle.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (int i = 0; i < listMovementF.size(); i++) {
                    final int l = i;

                    Thread t1 = new Thread(new Runnable() {
                        public void run() {
                            
                            final ArrayList<BestMovement> listMovementF2 = listMovementF;
                            ig.moveZone(listMovementF2.get(l).getZona(), listMovementF2.get(l).getDirection());
                            //ig.moveZone(1, -1);
                        }
                   });  
                   t1.start();
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Puzzle.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });  
        t0.start();
    }//GEN-LAST:event_formWindowOpened

    private void btnIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzquierdaActionPerformed
        // TODO add your handling code here:
        //ig.setGrados(-30);
        ig.moveZone(Integer.parseInt(cbZone.getSelectedItem().toString()), -1);
    }//GEN-LAST:event_btnIzquierdaActionPerformed

    private void btnDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerechaActionPerformed
        // TODO add your handling code here:
        //ig.setGrados(30);
        ig.moveZone(Integer.parseInt(cbZone.getSelectedItem().toString()), 1);
    }//GEN-LAST:event_btnDerechaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Puzzle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Puzzle().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDerecha;
    private javax.swing.JButton btnIzquierda;
    private javax.swing.JComboBox cbZone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
